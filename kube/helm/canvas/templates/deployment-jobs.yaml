apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "canvas.componentName" (dict "root" . "component" "jobs") }}
  labels:
    app.kubernetes.io/name: {{ include "canvas.name" . }}
    app.kubernetes.io/component: jobs
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.jobs.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "canvas.name" . }}
      app.kubernetes.io/component: jobs
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "canvas.name" . }}
        app.kubernetes.io/component: jobs
        app.kubernetes.io/instance: {{ .Release.Name }}
    {{- $securitySecret := default (include "canvas.securitySecretName" .) .Values.security.existingSecret }}
    spec:
      containers:
        - name: jobs
          image: {{ include "canvas.image" (dict "root" . "component" "jobs") }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["bundle", "exec", "script/delayed_job", "run"]
          env:
            - name: RAILS_ENV
              value: development
            - name: NODE_ENV
              value: development
            - name: POSTGRES_HOST
              value: {{ include "canvas.postgresHost" . }}
            - name: CANVAS_DATABASE_HOST
              value: {{ include "canvas.postgresHost" . }}
            - name: POSTGRES_USER
              value: {{ .Values.postgres.username }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret }}{{ .Values.postgres.existingSecret }}{{ else }}{{ include "canvas.postgresSecretName" . }}{{ end }}
                  key: password
            - name: POSTGRES_DB
              value: {{ .Values.postgres.database }}
            - name: CANVAS_DATABASE_USERNAME
              value: {{ .Values.postgres.username }}
            - name: CANVAS_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgres.existingSecret }}{{ .Values.postgres.existingSecret }}{{ else }}{{ include "canvas.postgresSecretName" . }}{{ end }}
                  key: password
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $securitySecret }}
                  key: encryption_key
            - name: JWT_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $securitySecret }}
                  key: jwt_encryption_key
            - name: REDIS_URL
              value: redis://{{ include "canvas.redisHost" . }}:6379
            {{- range $key, $val := .Values.web.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            {{- range $env := .Values.extraEnv }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
            {{- end }}
            {{- range $env := .Values.jobs.extraEnv }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
            {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /usr/src/app/tmp
          {{- with .Values.jobs.resources }}
          resources:
{{ toYaml . | indent 12 }}
          {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 6 }}
      {{- end }}
